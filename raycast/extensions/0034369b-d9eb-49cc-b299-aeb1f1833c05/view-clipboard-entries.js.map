{
  "version": 3,
  "sources": ["../src/view-clipboard-entries.tsx"],
  "sourcesContent": ["import {\n  getPreferenceValues,\n  List,\n  Icon,\n  ActionPanel,\n  Action,\n  Clipboard,\n  Detail,\n  openExtensionPreferences,\n} from \"@raycast/api\";\nimport { useState, useEffect } from \"react\";\nimport { execSync } from \"child_process\";\n\n// Handle preferences\ninterface ExtensionPreferences {\n  default_tab: string;\n}\n\nexport default function Command() {\n  // Fetch preferences\n  const { default_tab } = getPreferenceValues<ExtensionPreferences>();\n  const copyQPath = \"/Applications/CopyQ.app/Contents/MacOS/CopyQ\";\n\n  // Error handling for missing CopyQ path and CopyQ not running\n  try {\n    execSync(`${copyQPath} tab`, { encoding: \"utf8\" });\n  } catch (err) {\n    return (\n      <Detail\n        markdown={\n          \"CopyQ not found, or CopyQ server not running\\n\\nPlease check that CopyQ is installed properly, and make sure CopyQ server is running.\"\n        }\n        actions={\n          <ActionPanel>\n            <Action title=\"Open Command Preferences\" icon={Icon.Cog} onAction={openExtensionPreferences} />\n            <Action.Paste title=\"Copy Path to Clipboard\" content={copyQPath} />\n          </ActionPanel>\n        }\n      />\n    );\n  }\n\n  // State for selected tab and clipboard contents\n  const [selectedTab, setSelectedTab] = useState(default_tab);\n  const [clipboardContents, setClipboardContents] = useState<string[]>([]);\n\n  // Get the list of tabs from CopyQ and return an array of text\n  function getTabs(): string[] {\n    const command = `\"${copyQPath}\" tab`;\n    const stdout = execSync(command, { encoding: \"utf8\" });\n\n    // Format list of tabs from string to array\n    const lines = stdout.split(\"\\n\");\n    const formattedList = lines.filter((line) => line.trim() !== \"\");\n    // Remove & from items in the list\n    const cleanedList = formattedList.map((item) => item.replace(\"&\", \"\"));\n\n    return cleanedList;\n  }\n\n  // Dropdown component for selecting a tab\n  function TabDropdown() {\n    const tabs = getTabs();\n    return (\n      <List.Dropdown\n        tooltip=\"Select a Tab\"\n        defaultValue={default_tab}\n        storeValue={false}\n        placeholder=\"Search Tabs\"\n        onChange={(newTab) => setSelectedTab(newTab)}\n      >\n        {tabs.map((tab) => (\n          <List.Dropdown.Item key={tab} title={tab} value={tab} />\n        ))}\n      </List.Dropdown>\n    );\n  }\n\n  // Gets clipboard contents for a given tab and returns an array of text\n  function getClipboardContents(tab: string) {\n    const command = `${copyQPath} tab ${tab} 'separator(String.fromCharCode(0)); read.apply(this, [...Array(size()).keys()])'`;\n    const stdout = execSync(command, { encoding: \"utf8\" });\n    // Return the array split by null characters\n    return stdout.split(\"\\0\");\n  }\n\n  // Selects clipboard content for a given tab and index\n  function selectClipboardContents(tab: string, index: number) {\n    const command = `${copyQPath} tab ${tab} select ${index}`;\n    execSync(command);\n  }\n\n  // Effect to update clipboard contents when tab or maxEntries change\n  useEffect(() => {\n    const newClipboardContents = getClipboardContents(selectedTab);\n    setClipboardContents(newClipboardContents);\n  }, [selectedTab]);\n\n  return (\n    <List\n      navigationTitle=\"Clipboard Manager\"\n      searchBarPlaceholder=\"Search Clipboard Contents\"\n      searchBarAccessory={<TabDropdown />}\n      isShowingDetail={true}\n    >\n      {clipboardContents.map((text, index) => (\n        <List.Item\n          key={index}\n          title={text}\n          actions={\n            <ActionPanel>\n              <Action\n                title=\"Paste\"\n                icon={Icon.Clipboard}\n                onAction={() => {\n                  selectClipboardContents(selectedTab, index);\n                  Clipboard.paste({ text });\n                }}\n              />\n              <Action.Push title=\"Preview\" icon={Icon.Eye} target={<Detail markdown={text} />} />\n            </ActionPanel>\n          }\n          detail={<List.Item.Detail markdown={text} />}\n        />\n      ))}\n    </List>\n  );\n}\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EASO,wBACPC,EAAoC,iBACpCC,EAAyB,yBAsBfC,EAAA,6BAfK,SAARL,GAA2B,CAEhC,GAAM,CAAE,YAAAM,CAAY,KAAI,uBAA0C,EAC5DC,EAAY,+CAGlB,GAAI,IACF,YAAS,GAAGA,QAAiB,CAAE,SAAU,MAAO,CAAC,CACnD,MAAE,CACA,SACE,OAAC,UACC,SACE;AAAA;AAAA,uFAEF,WACE,QAAC,eACC,oBAAC,UAAO,MAAM,2BAA2B,KAAM,OAAK,IAAK,SAAU,2BAA0B,KAC7F,OAAC,SAAO,MAAP,CAAa,MAAM,yBAAyB,QAASA,EAAW,GACnE,EAEJ,CAEJ,CAGA,GAAM,CAACC,EAAaC,CAAc,KAAI,YAASH,CAAW,EACpD,CAACI,EAAmBC,CAAoB,KAAI,YAAmB,CAAC,CAAC,EAGvE,SAASC,GAAoB,CAC3B,IAAMC,EAAU,IAAIN,SASpB,SARe,YAASM,EAAS,CAAE,SAAU,MAAO,CAAC,EAGhC,MAAM;AAAA,CAAI,EACH,OAAQC,GAASA,EAAK,KAAK,IAAM,EAAE,EAE7B,IAAKC,GAASA,EAAK,QAAQ,IAAK,EAAE,CAAC,CAGvE,CAGA,SAASC,GAAc,CACrB,IAAMC,EAAOL,EAAQ,EACrB,SACE,OAAC,OAAK,SAAL,CACC,QAAQ,eACR,aAAcN,EACd,WAAY,GACZ,YAAY,cACZ,SAAWY,GAAWT,EAAeS,CAAM,EAE1C,SAAAD,EAAK,IAAKE,MACT,OAAC,OAAK,SAAS,KAAd,CAA6B,MAAOA,EAAK,MAAOA,GAAxBA,CAA6B,CACvD,EACH,CAEJ,CAGA,SAASC,EAAqBD,EAAa,CACzC,IAAMN,EAAU,GAAGN,SAAiBY,qFAGpC,SAFe,YAASN,EAAS,CAAE,SAAU,MAAO,CAAC,EAEvC,MAAM,IAAI,CAC1B,CAGA,SAASQ,EAAwBF,EAAaG,EAAe,CAC3D,IAAMT,EAAU,GAAGN,SAAiBY,YAAcG,OAClD,YAAST,CAAO,CAClB,CAGA,sBAAU,IAAM,CACd,IAAMU,EAAuBH,EAAqBZ,CAAW,EAC7DG,EAAqBY,CAAoB,CAC3C,EAAG,CAACf,CAAW,CAAC,KAGd,OAAC,QACC,gBAAgB,oBAChB,qBAAqB,4BACrB,sBAAoB,OAACQ,EAAA,EAAY,EACjC,gBAAiB,GAEhB,SAAAN,EAAkB,IAAI,CAACc,EAAMF,OAC5B,OAAC,OAAK,KAAL,CAEC,MAAOE,EACP,WACE,QAAC,eACC,oBAAC,UACC,MAAM,QACN,KAAM,OAAK,UACX,SAAU,IAAM,CACdH,EAAwBb,EAAac,CAAK,EAC1C,YAAU,MAAM,CAAE,KAAAE,CAAK,CAAC,CAC1B,EACF,KACA,OAAC,SAAO,KAAP,CAAY,MAAM,UAAU,KAAM,OAAK,IAAK,UAAQ,OAAC,UAAO,SAAUA,EAAM,EAAI,GACnF,EAEF,UAAQ,OAAC,OAAK,KAAK,OAAV,CAAiB,SAAUA,EAAM,GAfrCF,CAgBP,CACD,EACH,CAEJ",
  "names": ["view_clipboard_entries_exports", "__export", "Command", "__toCommonJS", "import_api", "import_react", "import_child_process", "import_jsx_runtime", "default_tab", "copyQPath", "selectedTab", "setSelectedTab", "clipboardContents", "setClipboardContents", "getTabs", "command", "line", "item", "TabDropdown", "tabs", "newTab", "tab", "getClipboardContents", "selectClipboardContents", "index", "newClipboardContents", "text"]
}
