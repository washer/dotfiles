{
  "version": 3,
  "sources": ["../src/current.ts", "../src/trackNotification.ts", "../node_modules/run-applescript/index.js"],
  "sourcesContent": ["import { showNotification } from \"./trackNotification\";\n\nexport default async () => {\n  await showNotification();\n};\n", "import { getPreferenceValues, showHUD } from \"@raycast/api\";\nimport { PreferenceValues } from \"@raycast/api\";\nimport { runAppleScript } from \"run-applescript\";\n\nexport async function showPreviousTrackNotification() {\n  const preferences = getPreferenceValues<PreferenceValues>();\n  if (false === preferences.previousTrackNotificationEnabled) {\n    return;\n  }\n\n  await showNotification();\n}\n\nexport async function showNextTrackNotification() {\n  const preferences = getPreferenceValues<PreferenceValues>();\n  if (false === preferences.nextTrackNotificationEnabled) {\n    return;\n  }\n\n  await showNotification();\n}\n\nexport async function showNotification() {\n  const script = `\n      if application \"Spotify\" is not running then\n          return \"Not playing\"\n      end if\n\n      property currentTrackName : \"Unknown Track\"\n      property currentTrackArtist : \"Unknown Artist\"\n      property playerState : \"stopped\"\n\n      tell application \"Spotify\"\n          try\n              set currentTrackName to name of the current track\n              set currentTrackArtist to artist of the current track\n              set playerState to player state as string\n          end try\n      end tell\n\n      if playerState is \"playing\" then\n        return currentTrackName & \" by \" & currentTrackArtist\n      else if playerState is \"paused\" then\n          return currentTrackName & \" by \" & currentTrackArtist & \" (Paused)\"\n      else\n          return \"Not playing\"\n      end if`;\n\n  try {\n    const result = await runAppleScript(script);\n    await showHUD(\"\uD83C\uDFA7 \" + result);\n  } catch (err) {\n    console.error(err);\n  }\n}\n", "import process from 'node:process';\nimport {promisify} from 'node:util';\nimport {execFile, execFileSync} from 'node:child_process';\n\nconst execFileAsync = promisify(execFile);\n\nexport async function runAppleScript(script, {humanReadableOutput = true} = {}) {\n\tif (process.platform !== 'darwin') {\n\t\tthrow new Error('macOS only');\n\t}\n\n\tconst outputArguments = humanReadableOutput ? [] : ['-ss'];\n\n\tconst {stdout} = await execFileAsync('osascript', ['-e', script, outputArguments]);\n\treturn stdout.trim();\n}\n\nexport function runAppleScriptSync(script, {humanReadableOutput = true} = {}) {\n\tif (process.platform !== 'darwin') {\n\t\tthrow new Error('macOS only');\n\t}\n\n\tconst outputArguments = humanReadableOutput ? [] : ['-ss'];\n\n\tconst stdout = execFileSync('osascript', ['-e', script, ...outputArguments], {\n\t\tencoding: 'utf8',\n\t\tstdio: ['ignore', 'pipe', 'ignore'],\n\t\ttimeout: 500,\n\t});\n\n\treturn stdout.trim();\n}\n"],
  "mappings": "0jBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GCAA,IAAAI,EAA6C,wBCA7C,IAAAC,EAAoB,6BACpBC,EAAwB,qBACxBC,EAAqC,8BAE/BC,KAAgB,aAAU,UAAQ,EAExC,eAAsBC,EAAeC,EAAQ,CAAC,oBAAAC,EAAsB,EAAI,EAAI,CAAC,EAAG,CAC/E,GAAI,EAAAC,QAAQ,WAAa,SACxB,MAAM,IAAI,MAAM,YAAY,EAG7B,IAAMC,EAAkBF,EAAsB,CAAC,EAAI,CAAC,KAAK,EAEnD,CAAC,OAAAG,CAAM,EAAI,MAAMN,EAAc,YAAa,CAAC,KAAME,EAAQG,CAAe,CAAC,EACjF,OAAOC,EAAO,KAAK,CACpB,CDOA,eAAsBC,GAAmB,CACvC,IAAMC,EAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAyBf,GAAI,CACF,IAAMC,EAAS,MAAMC,EAAeF,CAAM,EAC1C,QAAM,WAAQ,aAAQC,CAAM,CAC9B,OAASE,EAAK,CACZ,QAAQ,MAAMA,CAAG,CACnB,CACF,CDpDA,IAAOC,EAAQ,SAAY,CACzB,MAAMC,EAAiB,CACzB",
  "names": ["current_exports", "__export", "current_default", "__toCommonJS", "import_api", "import_node_process", "import_node_util", "import_node_child_process", "execFileAsync", "runAppleScript", "script", "humanReadableOutput", "process", "outputArguments", "stdout", "showNotification", "script", "result", "runAppleScript", "err", "current_default", "showNotification"]
}
