{
  "version": 3,
  "sources": ["../src/nextTrack.ts", "../src/utils.ts", "../node_modules/run-applescript/index.js", "../src/trackNotification.ts"],
  "sourcesContent": ["import { buildScriptEnsuringSpotifyIsRunning, runAppleScriptSilently } from \"./utils\";\nimport { showNextTrackNotification } from \"./trackNotification\";\n\nexport default async () => {\n  const script = buildScriptEnsuringSpotifyIsRunning(`next track`);\n  await runAppleScriptSilently(script);\n  await showNextTrackNotification();\n};\n", "import { closeMainWindow, getApplications, showHUD } from \"@raycast/api\";\nimport { runAppleScript } from \"run-applescript\";\n\n/**\n * Builds AppleScript to ensure Spotify is running and then wraps the passed command(s).\n *\n * @param commandsToRunAfterSpotifyIsRunning - The AppleScript command(s) to run after ensuring Spotify is running.\n * @returns Generated AppleScript.\n */\nexport function buildScriptEnsuringSpotifyIsRunning(commandsToRunAfterSpotifyIsRunning: string): string {\n  return `\n    tell application \"Spotify\"\n      if not application \"Spotify\" is running then\n        activate\n\n        set _maxOpenWaitTimeInSeconds to 5\n        set _openCounter to 1\n        repeat until application \"Spotify\" is running\n          delay 1\n          set _openCounter to _openCounter + 1\n          if _openCounter > _maxOpenWaitTimeInSeconds then exit repeat\n        end repeat\n      end if\n      ${commandsToRunAfterSpotifyIsRunning}\n    end tell`;\n}\n\n/**\n * Runs the AppleScript and closes the main window afterwards.\n *\n * @remarks\n * The main window is before running the AppleScript to keep the UI snappy.\n *\n * @param appleScript - The AppleScript to run\n * @throws An error when the AppleScript fails to run\n * @returns A promise that is resolved when the AppleScript finished running\n */\nexport async function runAppleScriptSilently(appleScript: string) {\n  await closeMainWindow({ clearRootSearch: true });\n\n  const applications = await getApplications();\n  const isSpotifyInstalled = applications.some((app) => app.name === \"Spotify\");\n  if (!isSpotifyInstalled) {\n    await showHUD(\"Spotify is not installed\");\n    return;\n  }\n\n  await runAppleScript(appleScript);\n}\n", "import process from 'node:process';\nimport {promisify} from 'node:util';\nimport {execFile, execFileSync} from 'node:child_process';\n\nconst execFileAsync = promisify(execFile);\n\nexport async function runAppleScript(script, {humanReadableOutput = true} = {}) {\n\tif (process.platform !== 'darwin') {\n\t\tthrow new Error('macOS only');\n\t}\n\n\tconst outputArguments = humanReadableOutput ? [] : ['-ss'];\n\n\tconst {stdout} = await execFileAsync('osascript', ['-e', script, outputArguments]);\n\treturn stdout.trim();\n}\n\nexport function runAppleScriptSync(script, {humanReadableOutput = true} = {}) {\n\tif (process.platform !== 'darwin') {\n\t\tthrow new Error('macOS only');\n\t}\n\n\tconst outputArguments = humanReadableOutput ? [] : ['-ss'];\n\n\tconst stdout = execFileSync('osascript', ['-e', script, ...outputArguments], {\n\t\tencoding: 'utf8',\n\t\tstdio: ['ignore', 'pipe', 'ignore'],\n\t\ttimeout: 500,\n\t});\n\n\treturn stdout.trim();\n}\n", "import { getPreferenceValues, showHUD } from \"@raycast/api\";\nimport { PreferenceValues } from \"@raycast/api\";\nimport { runAppleScript } from \"run-applescript\";\n\nexport async function showPreviousTrackNotification() {\n  const preferences = getPreferenceValues<PreferenceValues>();\n  if (false === preferences.previousTrackNotificationEnabled) {\n    return;\n  }\n\n  await showNotification();\n}\n\nexport async function showNextTrackNotification() {\n  const preferences = getPreferenceValues<PreferenceValues>();\n  if (false === preferences.nextTrackNotificationEnabled) {\n    return;\n  }\n\n  await showNotification();\n}\n\nexport async function showNotification() {\n  const script = `\n      if application \"Spotify\" is not running then\n          return \"Not playing\"\n      end if\n\n      property currentTrackName : \"Unknown Track\"\n      property currentTrackArtist : \"Unknown Artist\"\n      property playerState : \"stopped\"\n\n      tell application \"Spotify\"\n          try\n              set currentTrackName to name of the current track\n              set currentTrackArtist to artist of the current track\n              set playerState to player state as string\n          end try\n      end tell\n\n      if playerState is \"playing\" then\n        return currentTrackName & \" by \" & currentTrackArtist\n      else if playerState is \"paused\" then\n          return currentTrackName & \" by \" & currentTrackArtist & \" (Paused)\"\n      else\n          return \"Not playing\"\n      end if`;\n\n  try {\n    const result = await runAppleScript(script);\n    await showHUD(\"\uD83C\uDFA7 \" + result);\n  } catch (err) {\n    console.error(err);\n  }\n}\n"],
  "mappings": "0jBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GCAA,IAAAI,EAA0D,wBCA1D,IAAAC,EAAoB,6BACpBC,EAAwB,qBACxBC,EAAqC,8BAE/BC,KAAgB,aAAU,UAAQ,EAExC,eAAsBC,EAAeC,EAAQ,CAAC,oBAAAC,EAAsB,EAAI,EAAI,CAAC,EAAG,CAC/E,GAAI,EAAAC,QAAQ,WAAa,SACxB,MAAM,IAAI,MAAM,YAAY,EAG7B,IAAMC,EAAkBF,EAAsB,CAAC,EAAI,CAAC,KAAK,EAEnD,CAAC,OAAAG,CAAM,EAAI,MAAMN,EAAc,YAAa,CAAC,KAAME,EAAQG,CAAe,CAAC,EACjF,OAAOC,EAAO,KAAK,CACpB,CDNO,SAASC,EAAoCC,EAAoD,CACtG,MAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAaDA,CAAkC;AAAA,aAE1C,CAYA,eAAsBC,EAAuBC,EAAqB,CAKhE,GAJA,QAAM,mBAAgB,CAAE,gBAAiB,EAAK,CAAC,EAI3C,EAFiB,QAAM,mBAAgB,GACH,KAAMC,GAAQA,EAAI,OAAS,SAAS,EACnD,CACvB,QAAM,WAAQ,0BAA0B,EACxC,MACF,CAEA,MAAMC,EAAeF,CAAW,CAClC,CEhDA,IAAAG,EAA6C,wBAa7C,eAAsBC,GAA4B,IAC5B,uBAAsC,EAChC,+BAAtB,IAIJ,MAAMC,EAAiB,CACzB,CAEA,eAAsBA,GAAmB,CACvC,IAAMC,EAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAyBf,GAAI,CACF,IAAMC,EAAS,MAAMC,EAAeF,CAAM,EAC1C,QAAM,WAAQ,aAAQC,CAAM,CAC9B,OAASE,EAAK,CACZ,QAAQ,MAAMA,CAAG,CACnB,CACF,CHnDA,IAAOC,EAAQ,SAAY,CACzB,IAAMC,EAASC,EAAoC,YAAY,EAC/D,MAAMC,EAAuBF,CAAM,EACnC,MAAMG,EAA0B,CAClC",
  "names": ["nextTrack_exports", "__export", "nextTrack_default", "__toCommonJS", "import_api", "import_node_process", "import_node_util", "import_node_child_process", "execFileAsync", "runAppleScript", "script", "humanReadableOutput", "process", "outputArguments", "stdout", "buildScriptEnsuringSpotifyIsRunning", "commandsToRunAfterSpotifyIsRunning", "runAppleScriptSilently", "appleScript", "app", "runAppleScript", "import_api", "showNextTrackNotification", "showNotification", "script", "result", "runAppleScript", "err", "nextTrack_default", "script", "buildScriptEnsuringSpotifyIsRunning", "runAppleScriptSilently", "showNextTrackNotification"]
}
