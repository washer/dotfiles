{
  "version": 3,
  "sources": ["../src/shuffle.ts", "../node_modules/run-applescript/index.js", "../src/utils.ts"],
  "sourcesContent": ["import { showToast, Toast } from \"@raycast/api\";\nimport { runAppleScript } from \"run-applescript\";\nimport { buildScriptEnsuringSpotifyIsRunning } from \"./utils\";\n\nexport default async () => {\n  const script = buildScriptEnsuringSpotifyIsRunning(`\n    set shuffleEnabled to shuffling\n    set shuffling to not shuffleEnabled\n    return not shuffleEnabled\n  `);\n  try {\n    const result = await runAppleScript(script);\n    await showToast({\n      title: result === \"true\" ? \"Shuffle On\" : \"Shuffle Off\",\n    });\n  } catch {\n    await showToast({\n      style: Toast.Style.Failure,\n      title: \"Failed toggling shuffle\",\n    });\n  }\n};\n", "import process from 'node:process';\nimport {promisify} from 'node:util';\nimport {execFile, execFileSync} from 'node:child_process';\n\nconst execFileAsync = promisify(execFile);\n\nexport async function runAppleScript(script, {humanReadableOutput = true} = {}) {\n\tif (process.platform !== 'darwin') {\n\t\tthrow new Error('macOS only');\n\t}\n\n\tconst outputArguments = humanReadableOutput ? [] : ['-ss'];\n\n\tconst {stdout} = await execFileAsync('osascript', ['-e', script, outputArguments]);\n\treturn stdout.trim();\n}\n\nexport function runAppleScriptSync(script, {humanReadableOutput = true} = {}) {\n\tif (process.platform !== 'darwin') {\n\t\tthrow new Error('macOS only');\n\t}\n\n\tconst outputArguments = humanReadableOutput ? [] : ['-ss'];\n\n\tconst stdout = execFileSync('osascript', ['-e', script, ...outputArguments], {\n\t\tencoding: 'utf8',\n\t\tstdio: ['ignore', 'pipe', 'ignore'],\n\t\ttimeout: 500,\n\t});\n\n\treturn stdout.trim();\n}\n", "import { closeMainWindow, getApplications, showHUD } from \"@raycast/api\";\nimport { runAppleScript } from \"run-applescript\";\n\n/**\n * Builds AppleScript to ensure Spotify is running and then wraps the passed command(s).\n *\n * @param commandsToRunAfterSpotifyIsRunning - The AppleScript command(s) to run after ensuring Spotify is running.\n * @returns Generated AppleScript.\n */\nexport function buildScriptEnsuringSpotifyIsRunning(commandsToRunAfterSpotifyIsRunning: string): string {\n  return `\n    tell application \"Spotify\"\n      if not application \"Spotify\" is running then\n        activate\n\n        set _maxOpenWaitTimeInSeconds to 5\n        set _openCounter to 1\n        repeat until application \"Spotify\" is running\n          delay 1\n          set _openCounter to _openCounter + 1\n          if _openCounter > _maxOpenWaitTimeInSeconds then exit repeat\n        end repeat\n      end if\n      ${commandsToRunAfterSpotifyIsRunning}\n    end tell`;\n}\n\n/**\n * Runs the AppleScript and closes the main window afterwards.\n *\n * @remarks\n * The main window is before running the AppleScript to keep the UI snappy.\n *\n * @param appleScript - The AppleScript to run\n * @throws An error when the AppleScript fails to run\n * @returns A promise that is resolved when the AppleScript finished running\n */\nexport async function runAppleScriptSilently(appleScript: string) {\n  await closeMainWindow({ clearRootSearch: true });\n\n  const applications = await getApplications();\n  const isSpotifyInstalled = applications.some((app) => app.name === \"Spotify\");\n  if (!isSpotifyInstalled) {\n    await showHUD(\"Spotify is not installed\");\n    return;\n  }\n\n  await runAppleScript(appleScript);\n}\n"],
  "mappings": "0jBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAiC,wBCAjC,IAAAC,EAAoB,6BACpBC,EAAwB,qBACxBC,EAAqC,8BAE/BC,KAAgB,aAAU,UAAQ,EAExC,eAAsBC,EAAeC,EAAQ,CAAC,oBAAAC,EAAsB,EAAI,EAAI,CAAC,EAAG,CAC/E,GAAI,EAAAC,QAAQ,WAAa,SACxB,MAAM,IAAI,MAAM,YAAY,EAG7B,IAAMC,EAAkBF,EAAsB,CAAC,EAAI,CAAC,KAAK,EAEnD,CAAC,OAAAG,CAAM,EAAI,MAAMN,EAAc,YAAa,CAAC,KAAME,EAAQG,CAAe,CAAC,EACjF,OAAOC,EAAO,KAAK,CACpB,CCfA,IAAAC,EAA0D,wBASnD,SAASC,EAAoCC,EAAoD,CACtG,MAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAaDA,CAAkC;AAAA,aAE1C,CFrBA,IAAOC,EAAQ,SAAY,CACzB,IAAMC,EAASC,EAAoC;AAAA;AAAA;AAAA;AAAA,GAIlD,EACD,GAAI,CACF,IAAMC,EAAS,MAAMC,EAAeH,CAAM,EAC1C,QAAM,aAAU,CACd,MAAOE,IAAW,OAAS,aAAe,aAC5C,CAAC,CACH,MAAQ,CACN,QAAM,aAAU,CACd,MAAO,QAAM,MAAM,QACnB,MAAO,yBACT,CAAC,CACH,CACF",
  "names": ["shuffle_exports", "__export", "shuffle_default", "__toCommonJS", "import_api", "import_node_process", "import_node_util", "import_node_child_process", "execFileAsync", "runAppleScript", "script", "humanReadableOutput", "process", "outputArguments", "stdout", "import_api", "buildScriptEnsuringSpotifyIsRunning", "commandsToRunAfterSpotifyIsRunning", "shuffle_default", "script", "buildScriptEnsuringSpotifyIsRunning", "result", "runAppleScript"]
}
