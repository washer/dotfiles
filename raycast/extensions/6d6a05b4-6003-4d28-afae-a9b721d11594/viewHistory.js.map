{
  "version": 3,
  "sources": ["../src/viewHistory.tsx", "../src/uuidHistory.ts"],
  "sourcesContent": ["import {\n  ActionPanel,\n  List,\n  Action,\n  getPreferenceValues,\n  Clipboard,\n  showToast,\n  Toast,\n  Icon,\n  confirmAlert,\n} from \"@raycast/api\";\nimport { useEffect, useState } from \"react\";\n\nimport { getHistory as fetchHistory, clearHistory as clearStoredHistory, deleteHistoryEntry } from \"./uuidHistory\";\nimport { HistoryEntry } from \"./uuidHistory\";\n\nexport default function ViewHistory() {\n  const [history, setHistory] = useState<HistoryEntry[]>([]);\n  const { defaultAction } = getPreferenceValues<Preferences.ViewHistory>();\n\n  useEffect(() => {\n    async function loadHistory() {\n      const historyData = await fetchHistory();\n      const reversedHistoryData = historyData.reverse();\n      setHistory(reversedHistoryData);\n    }\n\n    loadHistory();\n  }, []);\n\n  const clearHistory = async () => {\n    await confirmAlert({\n      title: \"Clear History\",\n      icon: Icon.Trash,\n      message: \"You can't undo this action. Are you sure you want to clear the history?\",\n      primaryAction: {\n        title: \"Clear History\",\n        onAction: () => {\n          clearStoredHistory();\n          setHistory([]); // Clear the history state after clearing the stored history\n        },\n      },\n    });\n  };\n\n  const deleteEntry = async (uuid: string) => {\n    const updatedHistory = await deleteHistoryEntry(uuid);\n    setHistory(updatedHistory); // Update the state with the history after deletion\n  };\n\n  const copyOrPasteAllUUIDs = async () => {\n    const allUUIDs = history.map((entry) => entry.uuid).join(\"\\r\\n\"); // Join all UUIDs with newline\n\n    if (defaultAction === \"copy\") {\n      await Clipboard.copy(allUUIDs);\n      showToast(Toast.Style.Success, \"Copied all UUIDs to clipboard.\");\n    } else if (defaultAction === \"paste\") {\n      await Clipboard.paste(allUUIDs);\n      showToast(Toast.Style.Success, \"Pasted all UUIDs.\");\n    }\n  };\n\n  return (\n    <List>\n      {history.map((entry, index) => {\n        const date = new Date(entry.timestamp);\n\n        return (\n          <List.Item\n            key={index}\n            title={entry.uuid}\n            accessories={[\n              { tag: entry.type, tooltip: \"Type\", icon: Icon.Tag },\n              { date: date, tooltip: date.toLocaleString(), icon: Icon.Clock },\n            ]}\n            actions={\n              <ActionPanel>\n                <Action.CopyToClipboard content={entry.uuid} />\n                <Action\n                  // eslint-disable-next-line @raycast/prefer-title-case\n                  title={`${defaultAction === \"copy\" ? \"Copy\" : \"Paste\"} All UUIDs`}\n                  icon={Icon.Clipboard}\n                  onAction={copyOrPasteAllUUIDs}\n                />\n                <ActionPanel.Section>\n                  <Action\n                    title=\"Delete Entry\"\n                    onAction={() => deleteEntry(entry.uuid)}\n                    icon={Icon.Trash}\n                    style={Action.Style.Destructive}\n                    shortcut={{ modifiers: [\"ctrl\"], key: \"x\" }}\n                  />\n                  <Action\n                    title=\"Clear History\"\n                    onAction={clearHistory}\n                    icon={Icon.Trash}\n                    style={Action.Style.Destructive}\n                    shortcut={{ modifiers: [\"ctrl\", \"shift\"], key: \"x\" }}\n                  />\n                </ActionPanel.Section>\n              </ActionPanel>\n            }\n          />\n        );\n      })}\n    </List>\n  );\n}\n", "import { LocalStorage, showToast, Toast } from \"@raycast/api\";\n\nexport interface HistoryEntry {\n  uuid: string;\n  timestamp: Date;\n  type: string;\n}\n\nexport enum UUIDType {\n  UUIDV4 = \"uuidV4\",\n  UUIDV5 = \"uuidV5\",\n  UUIDV7 = \"uuidV7\",\n  ULID = \"ulid\",\n  TYPEID = \"typeid\",\n}\n\nexport const addToHistory = async (uuid: string, type: UUIDType) => {\n  try {\n    let currentHistory = await LocalStorage.getItem(\"uuidHistory\");\n\n    if (!currentHistory) {\n      currentHistory = \"[]\";\n    }\n\n    if (typeof currentHistory !== \"string\") {\n      return;\n    }\n\n    const parsedHistory = JSON.parse(currentHistory);\n\n    parsedHistory.push({ uuid, timestamp: new Date(), type });\n\n    await LocalStorage.setItem(\"uuidHistory\", JSON.stringify(parsedHistory));\n  } catch (error) {\n    await showToast({\n      style: Toast.Style.Failure,\n      title: \"Error saving history\",\n      message: \"Failed to save history to local storage\",\n    });\n  }\n};\n\nexport const getHistory = async (): Promise<HistoryEntry[]> => {\n  try {\n    const result = await LocalStorage.getItem(\"uuidHistory\");\n\n    if (!result) {\n      return [];\n    }\n\n    if (typeof result !== \"string\") {\n      throw new Error(\"Invalid data type: Expected a string\");\n    }\n\n    if (result) {\n      const history = JSON.parse(result);\n      return history;\n    } else {\n      return [];\n    }\n  } catch (error) {\n    await showToast({\n      style: Toast.Style.Failure,\n      title: \"Error fetching history\",\n      message: \"Failed to retrieve history from local storage\",\n    });\n    return [];\n  }\n};\n\nexport const clearHistory = () => {\n  LocalStorage.removeItem(\"uuidHistory\")\n    .then(() => {\n      showToast({\n        style: Toast.Style.Success,\n        title: \"History Cleared\",\n        message: \"UUID history has been successfully cleared.\",\n      });\n    })\n    .catch((error) => {\n      console.error(\"Failed to clear history from local storage:\", error);\n      showToast({\n        style: Toast.Style.Failure,\n        title: \"Error clearing history\",\n        message: \"Failed to clear history from local storage\",\n      });\n    });\n};\n\nexport const deleteHistoryEntry = async (uuidToDelete: string) => {\n  try {\n    const result = await LocalStorage.getItem(\"uuidHistory\");\n\n    if (!result) {\n      return []; // No history found, return empty array\n    }\n\n    if (typeof result !== \"string\") {\n      throw new Error(\"Invalid data type: Expected a string\");\n    }\n\n    if (result) {\n      const history = JSON.parse(result) as HistoryEntry[];\n      const updatedHistory = history.filter((entry) => entry.uuid !== uuidToDelete);\n      await LocalStorage.setItem(\"uuidHistory\", JSON.stringify(updatedHistory));\n      return updatedHistory; // Return the updated history after deletion\n    } else {\n      return []; // No history found, return empty array\n    }\n  } catch (error) {\n    console.error(\"Failed to delete history entry:\", error);\n    return []; // Return empty array in case of error\n  }\n};\n"],
  "mappings": "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",
  "names": ["viewHistory_exports", "__export", "ViewHistory", "__toCommonJS", "import_api", "import_react", "import_api", "getHistory", "result", "clearHistory", "error", "deleteHistoryEntry", "uuidToDelete", "updatedHistory", "entry", "import_jsx_runtime", "ViewHistory", "history", "setHistory", "defaultAction", "loadHistory", "reversedHistoryData", "getHistory", "clearHistory", "deleteEntry", "uuid", "updatedHistory", "deleteHistoryEntry", "copyOrPasteAllUUIDs", "allUUIDs", "entry", "index", "date"]
}
