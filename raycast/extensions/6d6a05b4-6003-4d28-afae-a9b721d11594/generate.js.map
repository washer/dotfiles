{
  "version": 3,
  "sources": ["../src/generate.tsx", "../node_modules/uuid/dist/esm/stringify.js", "../node_modules/uuid/dist/esm/rng.js", "../node_modules/uuid/dist/esm/native.js", "../node_modules/uuid/dist/esm/v4.js", "../src/uuidHistory.ts", "../src/utils/uuidUtils.ts"],
  "sourcesContent": ["import { showHUD, Clipboard, getPreferenceValues, showToast, Toast } from \"@raycast/api\";\nimport { v4 as uuidV4 } from \"uuid\";\n\nimport { generateUuids } from \"./utils/uuidUtils\";\nimport { UUIDType } from \"./uuidHistory\";\n\ninterface UUIDArguments {\n  numberOfUUIDsToGenerate: string;\n}\n\ninterface Preferences {\n  upperCaseLetters: boolean;\n  defaultAction: string;\n}\n\n// don't want to cause a heap error, so cap it \uD83D\uDE31\nconst UUID_MAX_NUMBER = 10000;\n\nexport default async (props: { arguments: UUIDArguments }) => {\n  let { numberOfUUIDsToGenerate } = props.arguments;\n  const { upperCaseLetters, defaultAction } = getPreferenceValues<Preferences>();\n\n  if (!numberOfUUIDsToGenerate) {\n    numberOfUUIDsToGenerate = \"1\";\n  }\n\n  try {\n    const parseableNumber = parseInt(numberOfUUIDsToGenerate, 10);\n\n    if (isNaN(parseableNumber)) {\n      throw new Error(\"INVALID_NUMBER\");\n    }\n\n    // safe?\n    if (parseableNumber <= UUID_MAX_NUMBER) {\n      const uuids = await generateUuids(uuidV4, parseableNumber, upperCaseLetters, UUIDType.UUIDV4);\n\n      if (defaultAction === \"copy\") {\n        await Clipboard.copy(uuids.join(\"\\r\\n\"));\n      } else if (defaultAction === \"paste\") {\n        await Clipboard.paste(uuids.join(\"\\r\\n\"));\n      }\n      const action = defaultAction === \"copy\" ? \"Copied\" : \"Pasted\";\n      const successMessage = uuids.length > 1 ? `${action} ${uuids.length} new UUIDs.` : `${action} new UUID: ${uuids}`;\n      await showHUD(`\u2705 ${successMessage}`);\n    } else {\n      await showToast({\n        style: Toast.Style.Failure,\n        title: \"Too many UUIDs requested.\",\n        message: `${parseableNumber} exceeds maximum UUIDs of ${UUID_MAX_NUMBER}. Try a lower number.`,\n      });\n    }\n  } catch (e) {\n    await showToast({\n      style: Toast.Style.Failure,\n      title: \"Invalid number.\",\n      message: \"An invalid number has been provided. Try an actual number.\",\n    });\n  }\n};\n", "import validate from './validate.js';\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nexport function unsafeStringify(arr, offset = 0) {\n    return (byteToHex[arr[offset + 0]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] +\n        '-' +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] +\n        '-' +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] +\n        '-' +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] +\n        '-' +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset);\n    if (!validate(uuid)) {\n        throw TypeError('Stringified UUID is invalid');\n    }\n    return uuid;\n}\nexport default stringify;\n", "import { randomFillSync } from 'crypto';\nconst rnds8Pool = new Uint8Array(256);\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n    if (poolPtr > rnds8Pool.length - 16) {\n        randomFillSync(rnds8Pool);\n        poolPtr = 0;\n    }\n    return rnds8Pool.slice(poolPtr, (poolPtr += 16));\n}\n", "import { randomUUID } from 'crypto';\nexport default { randomUUID };\n", "import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nfunction v4(options, buf, offset) {\n    if (native.randomUUID && !buf && !options) {\n        return native.randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random ?? options.rng?.() ?? rng();\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return unsafeStringify(rnds);\n}\nexport default v4;\n", "import { LocalStorage, showToast, Toast } from \"@raycast/api\";\n\nexport interface HistoryEntry {\n  uuid: string;\n  timestamp: Date;\n  type: string;\n}\n\nexport enum UUIDType {\n  UUIDV4 = \"uuidV4\",\n  UUIDV5 = \"uuidV5\",\n  UUIDV7 = \"uuidV7\",\n  ULID = \"ulid\",\n  TYPEID = \"typeid\",\n}\n\nexport const addToHistory = async (uuid: string, type: UUIDType) => {\n  try {\n    let currentHistory = await LocalStorage.getItem(\"uuidHistory\");\n\n    if (!currentHistory) {\n      currentHistory = \"[]\";\n    }\n\n    if (typeof currentHistory !== \"string\") {\n      return;\n    }\n\n    const parsedHistory = JSON.parse(currentHistory);\n\n    parsedHistory.push({ uuid, timestamp: new Date(), type });\n\n    await LocalStorage.setItem(\"uuidHistory\", JSON.stringify(parsedHistory));\n  } catch (error) {\n    await showToast({\n      style: Toast.Style.Failure,\n      title: \"Error saving history\",\n      message: \"Failed to save history to local storage\",\n    });\n  }\n};\n\nexport const getHistory = async (): Promise<HistoryEntry[]> => {\n  try {\n    const result = await LocalStorage.getItem(\"uuidHistory\");\n\n    if (!result) {\n      return [];\n    }\n\n    if (typeof result !== \"string\") {\n      throw new Error(\"Invalid data type: Expected a string\");\n    }\n\n    if (result) {\n      const history = JSON.parse(result);\n      return history;\n    } else {\n      return [];\n    }\n  } catch (error) {\n    await showToast({\n      style: Toast.Style.Failure,\n      title: \"Error fetching history\",\n      message: \"Failed to retrieve history from local storage\",\n    });\n    return [];\n  }\n};\n\nexport const clearHistory = () => {\n  LocalStorage.removeItem(\"uuidHistory\")\n    .then(() => {\n      showToast({\n        style: Toast.Style.Success,\n        title: \"History Cleared\",\n        message: \"UUID history has been successfully cleared.\",\n      });\n    })\n    .catch((error) => {\n      console.error(\"Failed to clear history from local storage:\", error);\n      showToast({\n        style: Toast.Style.Failure,\n        title: \"Error clearing history\",\n        message: \"Failed to clear history from local storage\",\n      });\n    });\n};\n\nexport const deleteHistoryEntry = async (uuidToDelete: string) => {\n  try {\n    const result = await LocalStorage.getItem(\"uuidHistory\");\n\n    if (!result) {\n      return []; // No history found, return empty array\n    }\n\n    if (typeof result !== \"string\") {\n      throw new Error(\"Invalid data type: Expected a string\");\n    }\n\n    if (result) {\n      const history = JSON.parse(result) as HistoryEntry[];\n      const updatedHistory = history.filter((entry) => entry.uuid !== uuidToDelete);\n      await LocalStorage.setItem(\"uuidHistory\", JSON.stringify(updatedHistory));\n      return updatedHistory; // Return the updated history after deletion\n    } else {\n      return []; // No history found, return empty array\n    }\n  } catch (error) {\n    console.error(\"Failed to delete history entry:\", error);\n    return []; // Return empty array in case of error\n  }\n};\n", "import { addToHistory, UUIDType } from \"../uuidHistory\"; // Adjust the path based on your directory structure\n\nexport async function generateUuids(\n  uuidGenerator: () => string,\n  numberOfUuids: number,\n  upperCaseLetters = false,\n  type: UUIDType = UUIDType.UUIDV4,\n): Promise<string[]> {\n  const uuids = Array.from(Array(numberOfUuids)).map(() => {\n    const newUuid = uuidGenerator();\n    return upperCaseLetters ? newUuid.toUpperCase() : newUuid;\n  });\n\n  for (const uuid of uuids) {\n    await addToHistory(uuid, type);\n  }\n\n  return uuids;\n}\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAA0E,wBCC1E,IAAMC,EAAY,CAAC,EACnB,QAASC,EAAI,EAAGA,EAAI,IAAK,EAAEA,EACvBD,EAAU,MAAMC,EAAI,KAAO,SAAS,EAAE,EAAE,MAAM,CAAC,CAAC,EAE7C,SAASC,EAAgBC,EAAKC,EAAS,EAAG,CAC7C,OAAQJ,EAAUG,EAAIC,EAAS,CAAC,CAAC,EAC7BJ,EAAUG,EAAIC,EAAS,CAAC,CAAC,EACzBJ,EAAUG,EAAIC,EAAS,CAAC,CAAC,EACzBJ,EAAUG,EAAIC,EAAS,CAAC,CAAC,EACzB,IACAJ,EAAUG,EAAIC,EAAS,CAAC,CAAC,EACzBJ,EAAUG,EAAIC,EAAS,CAAC,CAAC,EACzB,IACAJ,EAAUG,EAAIC,EAAS,CAAC,CAAC,EACzBJ,EAAUG,EAAIC,EAAS,CAAC,CAAC,EACzB,IACAJ,EAAUG,EAAIC,EAAS,CAAC,CAAC,EACzBJ,EAAUG,EAAIC,EAAS,CAAC,CAAC,EACzB,IACAJ,EAAUG,EAAIC,EAAS,EAAE,CAAC,EAC1BJ,EAAUG,EAAIC,EAAS,EAAE,CAAC,EAC1BJ,EAAUG,EAAIC,EAAS,EAAE,CAAC,EAC1BJ,EAAUG,EAAIC,EAAS,EAAE,CAAC,EAC1BJ,EAAUG,EAAIC,EAAS,EAAE,CAAC,EAC1BJ,EAAUG,EAAIC,EAAS,EAAE,CAAC,GAAG,YAAY,CACjD,CC1BA,IAAAC,EAA+B,kBACzBC,EAAY,IAAI,WAAW,GAAG,EAChCC,EAAUD,EAAU,OACT,SAARE,GAAuB,CAC1B,OAAID,EAAUD,EAAU,OAAS,QAC7B,kBAAeA,CAAS,EACxBC,EAAU,GAEPD,EAAU,MAAMC,EAAUA,GAAW,EAAG,CACnD,CCTA,IAAAE,EAA2B,kBACpBC,EAAQ,CAAE,uBAAW,ECE5B,SAASC,EAAGC,EAASC,EAAKC,EAAQ,CAC9B,GAAIC,EAAO,YAAc,CAACF,GAAO,CAACD,EAC9B,OAAOG,EAAO,WAAW,EAE7BH,EAAUA,GAAW,CAAC,EACtB,IAAMI,EAAOJ,EAAQ,QAAUA,EAAQ,MAAM,GAAKK,EAAI,EACtD,GAAID,EAAK,OAAS,GACd,MAAM,IAAI,MAAM,mCAAmC,EAIvD,GAFAA,EAAK,CAAC,EAAKA,EAAK,CAAC,EAAI,GAAQ,GAC7BA,EAAK,CAAC,EAAKA,EAAK,CAAC,EAAI,GAAQ,IACzBH,EAAK,CAEL,GADAC,EAASA,GAAU,EACfA,EAAS,GAAKA,EAAS,GAAKD,EAAI,OAChC,MAAM,IAAI,WAAW,mBAAmBC,CAAM,IAAIA,EAAS,EAAE,0BAA0B,EAE3F,QAAS,EAAI,EAAG,EAAI,GAAI,EAAE,EACtBD,EAAIC,EAAS,CAAC,EAAIE,EAAK,CAAC,EAE5B,OAAOH,CACX,CACA,OAAOK,EAAgBF,CAAI,CAC/B,CACA,IAAOG,EAAQR,EC1Bf,IAAAS,EAA+C,wBAgBxC,IAAMC,EAAe,MAAOC,EAAcC,IAAmB,CAClE,GAAI,CACF,IAAIC,EAAiB,MAAM,eAAa,QAAQ,aAAa,EAM7D,GAJKA,IACHA,EAAiB,MAGf,OAAOA,GAAmB,SAC5B,OAGF,IAAMC,EAAgB,KAAK,MAAMD,CAAc,EAE/CC,EAAc,KAAK,CAAE,KAAAH,EAAM,UAAW,IAAI,KAAQ,KAAAC,CAAK,CAAC,EAExD,MAAM,eAAa,QAAQ,cAAe,KAAK,UAAUE,CAAa,CAAC,CACzE,MAAgB,CACd,QAAM,aAAU,CACd,MAAO,QAAM,MAAM,QACnB,MAAO,uBACP,QAAS,yCACX,CAAC,CACH,CACF,ECtCA,eAAsBC,EACpBC,EACAC,EACAC,EAAmB,GACnBC,WACmB,CACnB,IAAMC,EAAQ,MAAM,KAAK,MAAMH,CAAa,CAAC,EAAE,IAAI,IAAM,CACvD,IAAMI,EAAUL,EAAc,EAC9B,OAAOE,EAAmBG,EAAQ,YAAY,EAAIA,CACpD,CAAC,EAED,QAAWC,KAAQF,EACjB,MAAMG,EAAaD,EAAMH,CAAI,EAG/B,OAAOC,CACT,CNFA,IAAMI,EAAkB,IAEjBC,EAAQ,MAAOC,GAAwC,CAC5D,GAAI,CAAE,wBAAAC,CAAwB,EAAID,EAAM,UAClC,CAAE,iBAAAE,EAAkB,cAAAC,CAAc,KAAI,uBAAiC,EAExEF,IACHA,EAA0B,KAG5B,GAAI,CACF,IAAMG,EAAkB,SAASH,EAAyB,EAAE,EAE5D,GAAI,MAAMG,CAAe,EACvB,MAAM,IAAI,MAAM,gBAAgB,EAIlC,GAAIA,GAAmBN,EAAiB,CACtC,IAAMO,EAAQ,MAAMC,EAAcC,EAAQH,EAAiBF,UAAiC,EAExFC,IAAkB,OACpB,MAAM,YAAU,KAAKE,EAAM,KAAK;AAAA,CAAM,CAAC,EAC9BF,IAAkB,SAC3B,MAAM,YAAU,MAAME,EAAM,KAAK;AAAA,CAAM,CAAC,EAE1C,IAAMG,EAASL,IAAkB,OAAS,SAAW,SAC/CM,EAAiBJ,EAAM,OAAS,EAAI,GAAGG,CAAM,IAAIH,EAAM,MAAM,cAAgB,GAAGG,CAAM,cAAcH,CAAK,GAC/G,QAAM,WAAQ,UAAKI,CAAc,EAAE,CACrC,MACE,QAAM,aAAU,CACd,MAAO,QAAM,MAAM,QACnB,MAAO,4BACP,QAAS,GAAGL,CAAe,6BAA6BN,CAAe,uBACzE,CAAC,CAEL,MAAY,CACV,QAAM,aAAU,CACd,MAAO,QAAM,MAAM,QACnB,MAAO,kBACP,QAAS,4DACX,CAAC,CACH,CACF",
  "names": ["generate_exports", "__export", "generate_default", "__toCommonJS", "import_api", "byteToHex", "i", "unsafeStringify", "arr", "offset", "import_crypto", "rnds8Pool", "poolPtr", "rng", "import_crypto", "native_default", "v4", "options", "buf", "offset", "native_default", "rnds", "rng", "unsafeStringify", "v4_default", "import_api", "addToHistory", "uuid", "type", "currentHistory", "parsedHistory", "generateUuids", "uuidGenerator", "numberOfUuids", "upperCaseLetters", "type", "uuids", "newUuid", "uuid", "addToHistory", "UUID_MAX_NUMBER", "generate_default", "props", "numberOfUUIDsToGenerate", "upperCaseLetters", "defaultAction", "parseableNumber", "uuids", "generateUuids", "v4_default", "action", "successMessage"]
}
